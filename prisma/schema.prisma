// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

// Table to handle next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refreshToken      String? @map("refresh_token") @db.Text
  accessToken       String? @map("access_token") @db.Text
  expiresAt         Int?    @map("expires_at")
  tokenType         String? @map("token_type")
  scope             String?
  idToken           String? @map("id_token") @db.Text
  sessionState      String? @map("session_state")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

// Table to handle sessions
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// Gender for User
enum Gender {
  MALE
  FEMALE
  OTHER
}

// Table to handle user details and next auth verification
model User {
  id                 String    @id @default(cuid())
  fullName           String?
  email              String?   @unique // Optional in case of using provider like google, facebook
  emailVerified      DateTime? // Optional in case of using provider like google, facebook
  password           String?   @db.VarChar(255) // Optional in case of using provider like google, facebook
  accounts           Account[]
  sessions           Session[]
  bio                String?   @db.Text
  country            String?   @db.VarChar(255)
  city               String?   @db.VarChar(255)
  profession         String?   @db.VarChar(255)
  dob                DateTime? @db.Date
  gender             Gender?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  deletedAt          DateTime?
  medias             Media[]   @relation("UploadedMedias")
  profilePictureId   String?
  profilePicture     Media?    @relation(name: "ProfilePicture", fields: [profilePictureId], references: [id])
  passwordResetToken String?   @db.VarChar(255)

  @@map("users")
}

// Table to handle email verfication
model VerificationToken {
  identifier String
  token      String   @unique @db.VarChar(255)
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationTokens")
}

// Supported media type
enum MediaType {
  VIDEO
  AUDIO
  IMAGE
  FILE
}

// Media
model Media {
  id                  String    @id @default(cuid())
  type                MediaType
  isPublic            Boolean   @default(true)
  caption             String?   @db.VarChar(255)
  height              Int?      @db.UnsignedInt
  width               Int?      @db.UnsignedInt
  uploadedAt          DateTime  @default(now())
  uploadedBy          User      @relation(name: "UploadedMedias", fields: [userId], references: [id])
  userId              String
  profilePictureUsers User[]    @relation("ProfilePicture")

  @@map("medias")
}
