// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Gender for User
enum Gender {
  MALE
  FEMALE
  MALE_OTHER
  FEMALE_OTHER
}

model User {
  id                 String             @id @default(cuid())
  fullName           String             @db.VarChar(150)
  username           String             @unique @db.VarChar(20)
  password           String             @db.VarChar(255)
  bio                String?            @db.Text
  country            String?            @db.VarChar(60)
  city               String?            @db.VarChar(255)
  profession         String?            @db.VarChar(50)
  dob                DateTime?          @db.Date
  gender             Gender?
  profilePictureMime String?            @db.VarChar(100)
  profilePicture     Bytes?
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  lastChatReadAt     DateTime?
  interests          InterestsOnUsers[]
  RequestedFriends   Friends[]          @relation("RequestedFriends")
  ReceivedFriends    Friends[]          @relation("ReceiverFriends")
  SentChats          Chats[]            @relation("SentChats")
  ReceivedChats      Chats[]            @relation("ReceivedChats")

  @@map("users")
}

model Interest {
  id    String             @id @default(cuid())
  name  String             @unique @db.VarChar(50)
  users InterestsOnUsers[]

  @@map("interests")
}

model InterestsOnUsers {
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  interest   Interest @relation(fields: [interestId], references: [id], onDelete: Cascade)
  userId     String
  interestId String

  @@id([userId, interestId])
  @@map("usersinterests")
}

model Friends {
  id              String    @id @default(cuid())
  requestedAt     DateTime  @default(now())
  approvedAt      DateTime?
  requestedUser   User      @relation("RequestedFriends", fields: [requestedUserId], references: [id], onDelete: Cascade)
  receiverUser    User      @relation("ReceiverFriends", fields: [receiverUserId], references: [id], onDelete: Cascade)
  requestedUserId String
  receiverUserId  String
  Chats           Chats[]

  @@unique([requestedUserId, receiverUserId])
  @@map("friends")
}

enum ChatType {
  CALL
  MESSAGE
}

model Chats {
  id         String   @id @default(cuid())
  receiver   User     @relation("ReceivedChats", fields: [receiverId], references: [id], onDelete: Cascade)
  sender     User     @relation("SentChats", fields: [senderId], references: [id], onDelete: Cascade)
  message    String?
  sentAt     DateTime @default(now())
  type       ChatType @default(MESSAGE)
  isRead     Boolean  @default(false)
  receiverId String
  senderId   String
  friend     Friends  @relation(fields: [friendsId], references: [id], onDelete: Cascade)
  friendsId  String

  @@map("chats")
}
